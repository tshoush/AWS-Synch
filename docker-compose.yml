version: '3.8'

services:
  # Redis for caching and Celery broker
  redis:
    image: redis:7-alpine
    container_name: ddi_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - ddi_network

  # Main application
  app:
    build: .
    container_name: ddi_app
    ports:
      - "8000:8000"
    environment:
      - ENV=production
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY:-change-me-in-production}
    depends_on:
      - redis
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    networks:
      - ddi_network
    command: hypercorn app:app --bind 0.0.0.0:8000 --workers 4

  # Celery worker
  celery_worker:
    build: .
    container_name: ddi_celery_worker
    environment:
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      - redis
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    networks:
      - ddi_network
    command: celery -A app.tasks worker --loglevel=info --concurrency=4

  # Celery beat for periodic tasks
  celery_beat:
    build: .
    container_name: ddi_celery_beat
    environment:
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      - redis
    networks:
      - ddi_network
    command: celery -A app.tasks beat --loglevel=info

  # Flower for Celery monitoring (optional)
  flower:
    build: .
    container_name: ddi_flower
    ports:
      - "5555:5555"
    environment:
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      - redis
    networks:
      - ddi_network
    command: celery -A app.tasks flower --port=5555

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: ddi_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
    networks:
      - ddi_network

volumes:
  redis_data:

networks:
  ddi_network:
    driver: bridge